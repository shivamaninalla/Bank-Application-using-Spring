package com.monocept.app.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.monocept.app.dto.CoursesDTO;
import com.monocept.app.dto.StudentsDTO;
import com.monocept.app.entity.Courses;
import com.monocept.app.entity.Students;
import com.monocept.app.service.StudentService;

@RestController
@RequestMapping("api")
public class StudentCourseController {

	private StudentService studentService;

	public StudentCourseController(StudentService studentService) {
		super();
		this.studentService = studentService;
	}

	@GetMapping()
	public ResponseEntity<List<StudentsDTO>> getAllStudents() {
		List<StudentsDTO> students = studentService.getAllStudents();
		return new ResponseEntity<List<StudentsDTO>>(students,HttpStatus.OK);
	}

//	@PostMapping()
//	public Students addStudent(@RequestParam(name = "name") String name) {
//		Students student = new Students();
//		student.setName(name);
//		return studentService.addStudent(student);
//	}
	@PostMapping()
	public Students addStudent(@RequestBody Students student) {
		
		return studentService.addStudent(student);
	}

	@GetMapping("{id}")
	public ResponseEntity<StudentsDTO> getStudentById(@PathVariable(name = "id") int id) {
		StudentsDTO student = studentService.getStudentById(id);
		return new ResponseEntity<StudentsDTO>(student,HttpStatus.OK);
	}

	@DeleteMapping("{id}")
	public ResponseEntity<String> deleteStudentById(@PathVariable(name = "id") int id) {
		String message=studentService.deleteStudentById(id);
		return new ResponseEntity<String>(message,HttpStatus.OK);
	}

	@GetMapping("courses")
	public ResponseEntity<List<CoursesDTO>> getAllCourses() {
		ResponseEntity<List<Courses>> courses = studentService.getAllCourses();
		return new ResponseEntity<List<CoursesDTO>>(courses,HttpStatus.OK);
	}

	@PostMapping("courses")
	public Courses addCourse(@RequestBody Courses course) {
		return studentService.addCourse(course);
	}

	@GetMapping("/courses/{id}")
	public Courses getCourseById(@PathVariable(name = "id") int id) {
		return studentService.getCourseById(id);
	}

	@DeleteMapping("courses/{id}")
	public void deleteCourseById(@PathVariable(name = "id") int id) {
		studentService.deleteCourseById(id);
	}

	@PostMapping("/{student_id}/courses/{course_id}")
	public Students addStudentToCourse(@PathVariable(name = "student_id") int student_id,
			@PathVariable(name = "course_id") int course_id) {

		return studentService.addStudentToCourse(student_id, course_id);

	}
	
	@DeleteMapping("/{student_id}/courses/{course_id}")
	public Students deleteStudentToCourse(@PathVariable(name = "student_id") int student_id,
			@PathVariable(name = "course_id") int course_id) {

		return studentService.deleteStudentToCourse(student_id, course_id);

	}

}
