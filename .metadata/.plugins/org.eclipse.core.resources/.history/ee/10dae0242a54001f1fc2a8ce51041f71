// Source code is decompiled from a .class file using FernFlower decompiler.
package com.techlabs.app.service;

import java.util.HashSet;
import java.util.Set;

import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.techlabs.app.dto.LoginDto;
import com.techlabs.app.dto.RegisterDto;
import com.techlabs.app.entity.Role;
import com.techlabs.app.entity.User;
import com.techlabs.app.exception.StudentApiException;
import com.techlabs.app.repository.RoleRepository;
import com.techlabs.app.repository.UserRepository;
import com.techlabs.app.security.JwtTokenProvider;

@Service
public class AuthServiceImpl implements AuthService {
   private AuthenticationManager authenticationManager;
   private UserRepository userRepository;
   private RoleRepository roleRepository;
   private PasswordEncoder passwordEncoder;
   private JwtTokenProvider jwtTokenProvider;

   public AuthServiceImpl(AuthenticationManager authenticationManager, UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder, JwtTokenProvider jwtTokenProvider) {
      this.authenticationManager = authenticationManager;
      this.userRepository = userRepository;
      this.roleRepository = roleRepository;
      this.passwordEncoder = passwordEncoder;
      this.jwtTokenProvider = jwtTokenProvider;
   }

   public String login(LoginDto loginDto) {
      Authentication authentication = this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(loginDto.getUsernameOrEmail(), loginDto.getPassword()));
      SecurityContextHolder.getContext().setAuthentication(authentication);
      String token = this.jwtTokenProvider.generateToken(authentication);
      return token;
   }

   public String register(RegisterDto registerDto) {
      if (this.userRepository.existsByUsername(registerDto.getUsername())) {
         throw new StudentApiException(HttpStatus.BAD_REQUEST, "Username is already exists!.");
      } else if (this.userRepository.existsByEmail(registerDto.getEmail())) {
         throw new StudentApiException(HttpStatus.BAD_REQUEST, "Email is already exists!.");
      } else {
         User user = new User();
         user.setName(registerDto.getName());
         user.setUsername(registerDto.getUsername());
         user.setEmail(registerDto.getEmail());
         user.setPassword(this.passwordEncoder.encode(registerDto.getPassword()));
         Set<Role> roles = new HashSet();
         Role userRole = (Role)this.roleRepository.findByName("ROLE_USER").get();
         roles.add(userRole);
         user.setRoles(roles);
         this.userRepository.save(user);
         return "User registered successfully!.";
      }
   }
}
