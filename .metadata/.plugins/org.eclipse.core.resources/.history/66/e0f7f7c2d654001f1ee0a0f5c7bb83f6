package com.techlabs.app.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.techlabs.app.dto.AccountRequestDTO;
import com.techlabs.app.dto.AccountResponseDTO;
import com.techlabs.app.dto.BankRequestDTO;
import com.techlabs.app.dto.CustomerRequestDTO;
import com.techlabs.app.dto.CustomerResponseDTO;
import com.techlabs.app.entity.Account;
import com.techlabs.app.entity.Bank;
import com.techlabs.app.entity.Customer;
import com.techlabs.app.repository.AccountRepository;
import com.techlabs.app.repository.BankRepository;
import com.techlabs.app.repository.CustomerRepository;
import com.techlabs.app.repository.TransactionRepository;

@Service
public class BankServiceImpl implements BankService{
	CustomerRepository customerRepository;
	
	AccountRepository accountRepository;
	BankRepository bankRepository;
	TransactionRepository transactionRepository;

	


	public BankServiceImpl(CustomerRepository customerRepository, AccountRepository accountRepository,
			BankRepository bankRepository, TransactionRepository transactionRepository) {
		super();
		this.customerRepository = customerRepository;
		this.accountRepository = accountRepository;
		this.bankRepository = bankRepository;
		this.transactionRepository = transactionRepository;
	}


	@Override
	public List<CustomerResponseDTO> getAllCustomers() {
		
		return  convertCustomertoCustomerDto(customerRepository.findAll());
	}


	private List<CustomerResponseDto> convertCustomertoCustomerDto(List<Customer> all) {
		List<CustomerResponseDto> customers=new ArrayList<>();
		
		for(Customer i:all) {
			CustomerResponseDto customer=new CustomerResponseDto();
			customer.setCustomer_id(i.getCustomer_id());
			customer.setFirstName(i.getFirstName());
			customer.setLastName(i.getLastName());
			customer.setTotalBalance(i.getTotalBalance());		
			customer.setAccounts(convertAccounttoAccountResponseDto(i.getAccounts()));
			customers.add(customer);
		}
		return customers;
	}

  

	private List<AccountResponseDto> convertAccounttoAccountResponseDto(List<Account> accounts) {
	
	
		List<AccountResponseDto> accountResponseDto=new ArrayList<>();
		for(Account account:accounts) {
			
			accountResponseDto.add(	convertAccounttoAccountResponseDto(account));
			
		}
		return accountResponseDto;
	}


	private AccountResponseDto convertAccounttoAccountResponseDto(Account account) {
		
		AccountResponseDto accountResponseDto= new AccountResponseDto();
		accountResponseDto.setAccountNumber(account.getAccountNumber());
		accountResponseDto.setBalance(account.getBalance());
		return accountResponseDto;
	}


	@Override
	public CustomerResponseDto addCustomer(CustomerRequestDto customerrequestdto) {
		
		Customer customer=convertcustomerRequestDtoToCustomer(customerrequestdto);
		return convertCustomerTocustomerResponseDto(customerRepository.save(customer));
		
	}


	private CustomerResponseDto convertCustomerTocustomerResponseDto(Customer customer) {
		CustomerResponseDto customer1 =  new CustomerResponseDto();
		customer1.setCustomer_id(customer.getCustomer_id());
		customer1.setFirstName(customer.getFirstName());
		customer1.setLastName(customer.getLastName());
		customer1.setTotalBalance(customer.getTotalBalance());
		return customer1;
	}


	private Customer convertcustomerRequestDtoToCustomer(CustomerRequestDto customerrequestdto) {
		Customer customer =  new Customer();
		customer.setCustomer_id(customerrequestdto.getCustomer_id());
		customer.setFirstName(customerrequestdto.getFirstName());
		customer.setLastName(customerrequestdto.getLastName());
		customer.setTotalBalance(customerrequestdto.getTotalBalance());
		return customer;
	}


	@Override
	public String deleteCustomerById(long id) {
		
		
		Customer customer=customerRepository.findById(id).orElse(null);
		if(customer!=null) {
			customerRepository.deleteById(id);
			
		}
		else {
			return "cannot find id";
		}
		return "customer deleted Successfully";
		
	}


	@Override
	public CustomerResponseDto findCustomerByid(long id) {
		Customer customer = customerRepository.findById(id).orElse(null);
		 
		return convertCustomerTocustomerResponseDto(customer);
	}


	@Override
	public CustomerResponseDto addAccount(long cid,int bid) {
		
		 Account account = new Account();
		 Bank bank = bankRepository.findById(bid).orElse(null);
		
		 
		 if(bank != null) {
			 Customer customer = customerRepository.findById(cid).orElse(null);
			 
			 if(customer != null){
				 
				//return convertAccounttoAccountResponseDto(accountRepository.save(account));
				 account.setBalance(1000);
				 account.setBank(bank);
				 account.setCustomer(customer);
				 
				 customer.addbankAccount(account);
				 double total_salary=1000;
				 if(accountRepository.getTotalBalance(customer)!=0) {
					 total_salary+=accountRepository.getTotalBalance(customer);
				 }
				 customer.setTotalBalance(total_salary);
				 Customer save = customerRepository.save(customer);
				 return convertCustomerTocustomerResponseDto(save);
				 
			 }
		 }
		return null;
		
		 
	
	
	}


	private Account convertAcountResponseDtoToAccount(AccountRequestDto accountRequestDto) {
		Account account=new Account();
		account.setAccountNumber(accountRequestDto.getAccountNumber());
		account.setBalance(accountRequestDto.getBalance());
		account.setBank(convertBankDtotoBank(accountRequestDto.getBankrequestDto()));
		account.setCustomer(convertcustomerDtoToCustomer(accountRequestDto.getCustomerRequestDto()));
		return account;
		
	}


	


	private Customer convertcustomerDtoToCustomer(CustomerRequestDto customerRequestDto) {
	
		Customer customer = new Customer();
		customer.setCustomer_id(customerRequestDto.getCustomer_id());
		customer.setFirstName(customerRequestDto.getFirstName());
		customer.setLastName(customerRequestDto.getLastName());
		customer.setTotalBalance(customerRequestDto.getTotalBalance());
		return customer;
	}


	private Bank convertBankDtotoBank(BankRequestDto bank) {
		Bank bank1 = new Bank();
		bank1.setBank_id(bank.getBank_id());
		bank1.setAbbreviation(bank.getAbbreviation());
		bank1.setFullName(bank.getFullName());
		return bank1;
	}


	
}
